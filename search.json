[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Finalblog",
    "section": "",
    "text": "The Story of Kangetsu: Network Analysis of a Buddhist Scholar’s Memoir\n\n\n\n\n\nAn blog for the final project\n\n\n\n\n\nJul 31, 2024\n\n\nRachel Han\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 27, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/final_project_notebook.html",
    "href": "posts/final_project_notebook.html",
    "title": "The Story of Kangetsu: Network Analysis of a Buddhist Scholar’s Memoir",
    "section": "",
    "text": "The project focuses on an unpublished memoir titled “Kangetsu: The Memoirs of Ruth Strout McCandless As Told to Günther Cologna in April 1994.” The memoir is a part of the Ruth Strout McCandless Collection on Nyogen Senzaki, housed at UCLA’s East Asian library. This collection, introduced to me by my supervisor, Dr. Jesse Drian, contains the memoir, which includes transcripts of eight tapes and recounts Ruth McCandless’ life, particularly her involvement with Zen Buddhism. Throughout the memoir, she details interactions with prominent Zen Buddhists such as Nyogen Senzaki, Soen Nakagawa, Soyen Shaku, Eido Tai Shimano, and D. T. Suzuki. Additionally, she was involved with influential Indian philosophers like Vanda Scaravelli, Jiddu Krishnamurti, and Selvarajan Yesudian, as well as notable figures in the writing and creative industry such as Anne Lindbergh, Harriet Doerr, Wallace Stegner, and Peter Matthiessen. The memoir also touches on her connections with spiritualists like Carolyn Conger and Brian Weiss and the educators from Stanford University, including Edith R. Mirrielees, Anthony Sokol, and Wilfred Stone.\nGiven the numerous characters in the memoir, it became evident that a network analysis would be beneficial to understand Ruth McCandless’s interactions and contributions to various fields, notably Zen Buddhism in mid-20th century America. By creating a network analysis, I aim to highlight her unique position as a female Buddhist scholar and elucidate the prominent figures in the development of Zen Buddhism in the United States. Additionally, the network analysis can illustrate the connections between individuals interested in Buddhism and those in the creative industry, offering a comprehensive view of the social landscape of an upper-class white female Buddhist scholar based in California during the twentieth century.\nThe memoir includes famous and non-famous individuals, but only recognized figures were included in the network analysis for privacy reasons. Despite the chronological order of the interview questions, a thorough reading revealed that the characters could be grouped into professions such as Indian Buddhist practitioner, Japanese Buddhist practitioner, creator, spiritualist, educator, and organizational personnel. Creators were divided into writer, actress, film producer, and publisher. \nThis project aims to illuminate Ruth McCandless’ significant contributions and connections within Zen Buddhism, Indian philosophy, and the creative industry through a comprehensive network analysis."
  },
  {
    "objectID": "posts/final_project_notebook.html#data-preparation",
    "href": "posts/final_project_notebook.html#data-preparation",
    "title": "The Story of Kangetsu: Network Analysis of a Buddhist Scholar’s Memoir",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nText Extraction and Cleaning:\n\n\nI began by converting an OCR-scanned document to text and saving it as “original copy 2.txt.” This document contained Ruth Strout McCandless’s memoirs.\nI utilized spaCy, an NLP library, to identify named entities within the text. I experimented with different pipelines: the medium-size pipeline (en_core_web_md), the large-size pipeline (en_core_web_lg), and the transformer pipeline (en_core_web_trf). I found that the results were almost the same across these pipelines. In this notebook, I only included the medium size pipeline. \nI combined the named entity recognition (NER) results from these pipelines. I identified both famous and non-famous individuals mentioned in the memoir. For this project, I only focused on famous individuals. I created an Excel file named “Noa_Names.xlsx,” which includes famous individuals. I compiled all variations of their names found in the NER process into one column, “Name in NER,” separated by commas, and included their full names in another column, “Full name.”\n\n\n!python -m spacy download en_core_web_md\n\n\n# The results from all three pipelines are similar. \n# You may execute the code with other pipelines to see the results.\n# You may need to download other models as desired.\nimport pandas as pd\nimport spacy\nfrom spacy import displacy\nfrom collections import Counter\npd.set_option('display.max_rows', 600)\npd.set_option('display.max_colwidth', 400)\nnlp = spacy.load('en_core_web_md')\n# nlp = spacy.load('en_core_web_lg')\n# nlp = spacy.load('en_core_web_trf')\n\n\nfilepath = \"original copy 2.txt\"\nwith open(filepath, encoding='utf-8') as file:\n    text = file.read()\n\n# Process the text using SpaCy\ndocument = nlp(text)\n\n\nimport math\n\n# Define number of chunks and calculate chunk size\nnumber_of_chunks = 80\n\n# Split text into chunks\nchunk_size = math.ceil(len(text) / number_of_chunks)\n\n# Split the text into chunks using list comprehension\ntext_chunks = [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]\n\n\n# Process text chunks with spaCy\nchunked_documents = list(nlp.pipe(text_chunks))\n\n\n# Extract and count named entities labeled as \"PERSON\"\npeople = [named_entity.text for document in chunked_documents for named_entity in document.ents if named_entity.label_ == \"PERSON\"]\n\npeople_tally = Counter(people)\n\ndf_people = pd.DataFrame(people_tally.most_common(), columns=['character', 'count'])\nprint(df_people.head(10))\n\n        character  count\n0          Duncan     95\n1            John     62\n2           Keith     62\n3  Senzaki Sensei     47\n4      Krishna-ji     47\n5      Soen Roshi     30\n6            Kirk     30\n7           Vanda     29\n8         Gunther     24\n9             Zen     18\n\n\n\nText Pre-processing:\n\n\nTo create a suitable node-edge table for network analysis, I pre-processed “original copy 2.txt.” I removed all unnecessary information, such as titles, endings, punctuation, line breaks, and page breaks. Additionally, “tape 1” to “tape 8” are notations at the beginning of every tape recording. Because of the OCR, tapes plus numbers are sometimes recognized as slightly different, such as “crape 5.” Therefore, I developed a regular expression for capturing variations of the word “tape” with a number from 1 to 8 and deleting them.\nI saved the cleaned text as “processed.txt.”\n\n\nimport pandas as pd\n# Removing all punctuations\nfile_path = 'original copy 2.txt'\n\n# Read the content of the file\nwith open(file_path, 'r') as file:\n    content = file.read()\n\nimport string\n\n# Create a translation table to map each punctuation character to None\ntranslator = str.maketrans('', '', string.punctuation)\n\nnopunctuation_content = content.translate(translator)\n\nfirst_onehundred_characters = nopunctuation_content[:100]\nprint(first_onehundred_characters)\n\n\n\fTape 1\n\nThis was in Japan I think about 196465 and Senzaki Sensei had not\nbeen back to Japan since\n\n\n\n\n# Create a regex pattern to match various misspellings or variations of \"Tape\" followed by numbers 1 to 8, such as &lt;Tape 1, crape 5...\nimport re\npattern = re.compile(r\"\\b(?:&lt;|CJ'|'l'|c|r)?[TtCcRr]'?[Aa][Pp][Ee]?\\s*[1-8]\\b\")\n\n# extract \n# Split the content into lines\nlines = nopunctuation_content.split('\\n')\n\n# Filter out lines matching the pattern\nfiltered_lines = [line for line in lines if not pattern.search(line)]\n\n# Join the filtered lines back into a single string\nnotape_content = '\\n'.join(filtered_lines)\n\nfirst_onehundred_characters = notape_content[:100]\nprint(first_onehundred_characters)\n\n\n\nThis was in Japan I think about 196465 and Senzaki Sensei had not\nbeen back to Japan since he had \n\n\n\n#deleting all the line breaks and page breaks \n\nnolinebreaks_content = notape_content.replace('\\n', ' ').replace('\\r', ' ').replace('\\f', '')\n\nfirst_fivehundred_characters = notape_content[:500]\nprint(first_fivehundred_characters)\n\n\n\nThis was in Japan I think about 196465 and Senzaki Sensei had not\nbeen back to Japan since he had left it early in the century to follow\nShaku Soen and Daisetsu Teitaro Suzuki to the United States It was a\nbeautiful beautiful day a Japanese day I would say There was a very\ngentle shiguritype rain and little diamond raindrops would come\ndown the fetch of the monastery There was also some sort of\ncelebration I dont know which one possibly of Buddhas birthday\nRoshi abbots priests of Zen had gathe\n\n\n\nName Replacement:\n\n\nUsing the list of famous people’s names from “Noa_Names.xlsx,” I replaced all variations of these names in “processed.txt” with their full names. The updated file was saved as “rename.txt.”\nAs seen in the “Noa_Names.xlsx” file, I also replaced the pronouns “I,” “my,” “me,” and “mine” with “Ruth McCandless.” Although this approach is imperfect, it suffices for the project’s needs. Since mentions of “Ruth McCandless” are rare in the original text, and she is the relater and central figure of the network, this replacement is necessary.\nI added regular expressions with ‘?&lt;=’ in the front and back of words to indicate two blank spaces before and after the word, ensuring it is recognized as a standalone. This prevents partial replacements, in other words.\nI manually rearranged longer name variations to be listed before shorter ones. For example, I ordered them as “Senzaki Senseis, Senzaki-sans, Senzaki Sensei, Senzaki.” This prevents repetitive replacements, such as replacing “Senzaki Senseis” with “Nyogen Senzaki” and then erroneously replacing “Nyogen Senzaki” with “Nyogen Nyogen Senzaki.”\n\n\nimport pandas as pd\n# Open a file in write mode\nwith open(\"processed.txt\", \"w\") as file:\n    # Write the string to the file\n    file.write(nolinebreaks_content)\n\n\n# Load the specific worksheet from the Excel file\ndf = pd.read_excel('Noa_Names.xlsx', sheet_name='Famous People')\n\n# Read the text from the file\nwith open('processed.txt', 'r') as file:\n   text = file.read().strip()\n\n\ntext1 = df['Name in NER'][1]\ntext2 = df['Full name'][1]\n\n# Replace commas with pipe characters in the 'Name in NER' column\n\ndf['Name in NER'] = df[['Name in NER']].apply(lambda x: x.str.replace(\", \", \"|\"))\n# Iterate over each row in the DataFrame\n\nfor i in df.index:\n   # Get the 'Name in NER' and 'Full name' for the current row\n   text1 = df['Name in NER'][i]\n   text2 = df['Full name'][i]\n   # Replace occurrences of names in 'text' with their full names\n   text = re.sub(text1, text2, text)\n    \nfirst_fivehundred_characters = text[:500]\nprint(first_fivehundred_characters)\n\nThis was in Japan Ruth McCandless think about 196465 and Nyogen Senzaki had not been back to Japan since he had left it early in the century to follow Soyen Shaku Nakagawa and D. T. Suzuki to the United States It was a beautiful beautiful day a Japanese day Ruth McCandless would say There was a very gentle shiguritype rain and little diamond raindrops would come down the fetch of the monastery There was also some sort of celebration Ruth McCandless dont know which one possibly of Buddhas birthda\n\n\n\nwith open('rename.txt', 'w') as file:\n    file.write(text)\n\n\nNode-Edge Table:\n\n\nFollowing the method used by Andrew Beveridge and Jie Shan in their paper “Network of Thrones,” I calculated the frequency of co-occurrences of characters within 15 words of each other in the text. My method is a simpler version because it does not consider pronouns or dialogues. The interview has a straightforward structure compared to novels. The interviewee recounted what had happened.\nThis frequency data was used to create a node-edge table, representing the degree of connections between individuals in the memoir.\n\n\n#Convert names in a column to a list\n\ndf = pd.read_excel('Noa_Names.xlsx', sheet_name='Famous People')\nname_column = df['Full name']\n\nnames = name_column.tolist()  \n\nprint(names)\n\n['Jiddu Krishnamurti', 'Nyogen Senzaki', 'Soen Nakagawa', 'Vanda Scaravelli', 'William Brugh Joy', 'Anne Lindbergh', 'D. T. Suzuki', 'Ruth McCandless', 'Radha Rajagopal Sloss', 'Soyen Shaku', 'Eido Tai Shimano', 'Sohaku Ogata', 'Helen Corral', 'Edith R. Mirrielees', 'Carolyn Conger', 'Harriet Doerr', 'Mary Zimbalist', 'Sōgen Asahina', 'Robert Baker Aitken', 'Brian Weiss', 'Wallace Stegner', 'Shubin Tanahashi', 'Anthony Sokol', 'Beatrice Wood', 'Wilfred Stone', 'Geoffrey Farwell', 'Zentatsu Richard Baker', 'Bill Rample', 'Noel Rodriguez', 'Peter Matthiessen', 'Felix Wolff', 'Helen Wolff', 'Manly P. Hall', 'Paul Reps', 'Frederick Spiegelberg', 'John Dodds', 'Gary Snyder', 'Jack Kerouac', 'Reginald Berkeley', 'George Gurdjieff', 'Alan Watts', 'Robertson Davies', 'Sam Zimbalist', 'Elisabeth Haich', 'Selvarajan Yesudian']\n\n\n\n# create a node-edge table that calculates the numbers of occurrence of names within 15 words\nfrom collections import defaultdict\n\n# Load the text data\nfile_path = 'rename.txt'\nwith open(file_path, 'r') as file:\n    text = file.read()\n\n# Split text into words\nwords = text.split()\npositions = {i: word for i, word in enumerate(words)}\n\nmatches = []\n\n# Check each word and see if it matches any name\nfor i in range(len(words)):\n    for name in names:\n        name_words = name.split()\n        if words[i:i + len(name_words)] == name_words:\n            matches.append((name, i))\n\n# Create a dictionary and calculate co-occurrences within 15 words\nco_occurrences = defaultdict(int)\n\nfor i, (name1, pos1) in enumerate(matches):\n    for name2, pos2 in matches[i + 1:]:\n        if name1 != name2 and abs(pos2 - pos1) &lt;= 15:\n            pair = tuple(sorted((name1, name2)))\n            co_occurrences[pair] += 1\n\n# Create a DataFrame to display the results\ndata = [{'Source': source, 'Target': target, 'Weight': weight} for (source, target), weight in co_occurrences.items()]\n\ndf = pd.DataFrame(data)\n\npd.set_option('display.max_rows', 100)\nprint(df)\n\n                   Source                  Target  Weight\n0          Nyogen Senzaki         Ruth McCandless      80\n1            D. T. Suzuki             Soyen Shaku       3\n2         Ruth McCandless           Sōgen Asahina       8\n3         Ruth McCandless           Soen Nakagawa      55\n4           Soen Nakagawa           Sōgen Asahina       1\n5        Eido Tai Shimano         Ruth McCandless       6\n6           Manly P. Hall         Ruth McCandless       7\n7         Ruth McCandless             Soyen Shaku       1\n8         Ruth McCandless       William Brugh Joy      30\n9          Nyogen Senzaki           Soen Nakagawa      13\n10           D. T. Suzuki          Nyogen Senzaki       3\n11           D. T. Suzuki         Ruth McCandless       9\n12        Ruth McCandless            Sohaku Ogata       4\n13         Nyogen Senzaki            Sohaku Ogata       3\n14         Nyogen Senzaki  Zentatsu Richard Baker       2\n15     Jiddu Krishnamurti         Ruth McCandless      10\n16     Jiddu Krishnamurti           Soen Nakagawa       2\n17     Jiddu Krishnamurti          Nyogen Senzaki       2\n18           Helen Corral         Ruth McCandless      18\n19        Ruth McCandless        Vanda Scaravelli       5\n20              Paul Reps         Ruth McCandless       2\n21         Nyogen Senzaki               Paul Reps       1\n22  Frederick Spiegelberg         Ruth McCandless       1\n23          Anthony Sokol         Ruth McCandless       6\n24         Nyogen Senzaki         Wallace Stegner       1\n25        Ruth McCandless         Wallace Stegner       7\n26          Beatrice Wood              John Dodds       1\n27          Beatrice Wood         Ruth McCandless       1\n28            Gary Snyder         Ruth McCandless       4\n29           Jack Kerouac         Ruth McCandless       3\n30            Gary Snyder            Jack Kerouac       1\n31          Soen Nakagawa       William Brugh Joy       3\n32    Edith R. Mirrielees         Ruth McCandless      14\n33       Geoffrey Farwell         Ruth McCandless       3\n34      Reginald Berkeley         Ruth McCandless       9\n35       George Gurdjieff          Nyogen Senzaki       1\n36       George Gurdjieff           Soen Nakagawa       1\n37           D. T. Suzuki        George Gurdjieff       1\n38       George Gurdjieff      Jiddu Krishnamurti       1\n39         Nyogen Senzaki       William Brugh Joy       2\n40           D. T. Suzuki           Soen Nakagawa       1\n41           D. T. Suzuki      Jiddu Krishnamurti       1\n42           D. T. Suzuki       William Brugh Joy       1\n43     Jiddu Krishnamurti       William Brugh Joy       1\n44      Peter Matthiessen         Ruth McCandless       1\n45         Carolyn Conger         Ruth McCandless      24\n46        Ruth McCandless  Zentatsu Richard Baker       2\n47        Ruth McCandless        Shubin Tanahashi       1\n48          Harriet Doerr         Ruth McCandless       5\n49          Harriet Doerr         Wallace Stegner       2\n50            Brian Weiss         Ruth McCandless       4\n51             John Dodds         Ruth McCandless       2\n52             Alan Watts         Ruth McCandless       2\n53            Bill Rample         Ruth McCandless       7\n54         Carolyn Conger       William Brugh Joy       1\n55       Robertson Davies         Ruth McCandless       1\n56  Radha Rajagopal Sloss         Ruth McCandless       9\n57         Mary Zimbalist         Ruth McCandless       4\n58         Mary Zimbalist           Sam Zimbalist       2\n59        Ruth McCandless           Sam Zimbalist       1\n60         Anne Lindbergh         Ruth McCandless      15\n61         Anne Lindbergh        Eido Tai Shimano       1\n62       Eido Tai Shimano  Zentatsu Richard Baker       1\n63       Eido Tai Shimano          Noel Rodriguez       1\n64        Elisabeth Haich         Ruth McCandless       2\n65         Noel Rodriguez         Ruth McCandless       1\n66         Anne Lindbergh            Helen Corral       1\n67         Anne Lindbergh             Felix Wolff       1\n68            Felix Wolff            Helen Corral       1\n69            Felix Wolff         Ruth McCandless       1"
  },
  {
    "objectID": "posts/final_project_notebook.html#network-visualization",
    "href": "posts/final_project_notebook.html#network-visualization",
    "title": "The Story of Kangetsu: Network Analysis of a Buddhist Scholar’s Memoir",
    "section": "Network Visualization",
    "text": "Network Visualization\n\n1. Community-Based Network Graph:\n\nUsing the node-edge table, I created a network graph with line width to reflect the weights resulting from the name closeness count and colored based on their modularity class (communities). This classification helped visualize clusters of closely connected individuals. The title of the graph is “Memoir Network by Modularity Class.”\nIn addition, I created a network graph without Ruth McCandless. The title of the graph is “Memoir Network by Modularity Class Without Ruth McCandless.”\n\n\n\n‘Memoir Network by Modularity Class’\n\n# Creating an interactive network with labels and responsive highlighting for communities \nimport networkx\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom bokeh.io import output_notebook, show, save\noutput_notebook()\n\n    \n    \n        \n        Loading BokehJS ...\n    \n\n\n\n\n\n\nG = networkx.from_pandas_edgelist(df, \n                                  'Source', \n                                  'Target', \n                                  'Weight')\n\n\nfrom bokeh.models import Range1d, Circle, ColumnDataSource, MultiLine, NodesAndLinkedEdges, LabelSet\nfrom bokeh.plotting import figure, from_networkx, show, save, output_file\nfrom bokeh.palettes import BuRd8, Viridis256\nfrom bokeh.transform import linear_cmap\nfrom networkx.algorithms import community\n\n\n#Calculate the degree for each node and add it as a node attribute\ndegrees = dict(networkx.degree(G))\nnetworkx.set_node_attributes(G, name='degree', values=degrees)\n\n\ncommunities = community.greedy_modularity_communities(G)\n\n\nmodularity_class = {}\nmodularity_color = {}\n\n#Loop through each community\nfor community_number, community in enumerate(communities):\n    color = BuRd8[community_number % len(BuRd8)]  \n    for name in community: \n        modularity_class[name] = community_number\n        modularity_color[name] = color\n\nnetworkx.set_node_attributes(G, name='modularity_class', values=modularity_class)\nnetworkx.set_node_attributes(G, name='modularity_color', values=modularity_color)\n\n\ntitle = 'Memoir Network by Modularity Class'\n\n#Define the colors used to highlight nodes and edges\nnode_highlight_color = 'yellow'\nedge_highlight_color = 'red'\n\n#Determine the attributes from the network that set the radius and color of nodes\nnode_radius_attribute = 1\nnode_color_attribute = 'modularity_color'\n\n#Define categories\nTOOLTIPS = [\n       (\"Modularity Class\", \"@modularity_class\"),\n       (\"Character\", \"@index\"),\n       (\"Modularity Color\", \"$color[swatch]:modularity_color\"),\n       (\"Degree\", \"@degree\")\n]\n\n#Generate a plot with specified dimensions, toolbar options, and title\nplot = figure(tooltips = TOOLTIPS, tools=\"wheel_zoom,reset,save,pan\", active_scroll='wheel_zoom',\n              x_range=Range1d(-22, 22), y_range=Range1d(-22, 22), title=title)\n\n#Construct a network graph object from the network data\nnetwork_graph = from_networkx(G, networkx.spring_layout, scale=20, center=(0, 0))\n\n#Assign the colors used to highlight edges\nnetwork_graph.edge_renderer.hover_glyph = MultiLine(line_color=edge_highlight_color)\nnetwork_graph.edge_renderer.selection_glyph = MultiLine(line_color=edge_highlight_color)\n\n#Adjust the radius and colors of nodes based on their degree\nnetwork_graph.node_renderer.glyph = Circle(radius=node_radius_attribute, fill_color=node_color_attribute)\n\n# Define a linear color mapper for edge weights\nedge_weights = [G[u][v]['Weight'] for u, v in G.edges()]\nmin_weight = min(edge_weights)\nmax_weight = max(edge_weights)\nedge_cmap = linear_cmap('Weight', palette=Viridis256, low=min_weight, high=max_weight)\n\n# Scale weights to a smaller range\nscaled_weights = [1 + 50 * (w - min_weight) / (max_weight - min_weight) for w in edge_weights]\nedge_cmap = linear_cmap('Weight', palette=Viridis256, low=min_weight, high=max_weight)\n\n# Define the opacity and width for edges based on scaled weights\nnetwork_graph.edge_renderer.data_source.data['scaled_weight'] = scaled_weights\nnetwork_graph.edge_renderer.glyph = MultiLine(line_alpha=0.5, line_width='scaled_weight', line_color=edge_cmap)\n\n# Specify the colors used to highlight nodes\nnetwork_graph.node_renderer.selection_glyph = Circle(radius=node_radius_attribute, fill_color=node_highlight_color)\nnetwork_graph.node_renderer.hover_glyph = Circle(radius=node_radius_attribute, fill_color=node_highlight_color)\n\n#Enable highlighting of nodes and edges\nnetwork_graph.inspection_policy = NodesAndLinkedEdges()\nnetwork_graph.selection_policy = NodesAndLinkedEdges()\n\nplot.renderers.append(network_graph)\n\n#Add Labels to the graph\nx, y = zip(*network_graph.layout_provider.graph_layout.values())\nnode_labels = list(G.nodes())\nsource = ColumnDataSource({'x': x, 'y': y, 'name': [node_labels[i] for i in range(len(x))]})\nlabels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white', \n                  text_font_size='10px', background_fill_alpha=0.7)\nplot.renderers.append(labels)\n\noutput_file(f\"{title}.html\", title=title)\nshow(plot)\nsave(plot)\n\n\n  \n\n\n\n\n\n'/home/jovyan/Final-project-DH140/Memoir Network by Modularity Class.html'\n\n\nResult 1: Memoir Network by Modularity Class\nThis graph focuses on modularity class, a measure of the strength of a network’s division into communities.\nFeatures: The colors of the nodes are from colorblind-friendly palettes.\nUsage: This graph is helpful for automatically visualizing the community structure within the network, showing how individuals are grouped based on their connections. It works better with extended text and a large amount of characters.\nFindings: Ruth McCandless is the central figure. High-degree nodes like Soen Nakagawa, Nyogen Senzaki, and William Brugh Joy are influential within the network and fit with the insights from the close reading. The width of the edges connecting these figures with Ruth McCandless reflects the closeness between the characters and the central figure. The communities are inaccurate because the modularity class does not represent the connections between characters’ knowledge gained in close reading.\n\n\n‘Memoir Network by Modularity Class Without Ruth McCandless’\n\n# Remove rows containing \"Ruth McCandless\" in either the \"Source\" or \"Target\" columns\ndf_filtered = df[~df['Source'].str.contains(\"Ruth McCandless\") & ~df['Target'].str.contains(\"Ruth McCandless\")]\n\nprint(df_filtered)\n\n                Source                  Target  Weight\n1         D. T. Suzuki             Soyen Shaku       3\n4        Soen Nakagawa           Sōgen Asahina       1\n9       Nyogen Senzaki           Soen Nakagawa      13\n10        D. T. Suzuki          Nyogen Senzaki       3\n13      Nyogen Senzaki            Sohaku Ogata       3\n14      Nyogen Senzaki  Zentatsu Richard Baker       2\n16  Jiddu Krishnamurti           Soen Nakagawa       2\n17  Jiddu Krishnamurti          Nyogen Senzaki       2\n21      Nyogen Senzaki               Paul Reps       1\n24      Nyogen Senzaki         Wallace Stegner       1\n26       Beatrice Wood              John Dodds       1\n30         Gary Snyder            Jack Kerouac       1\n31       Soen Nakagawa       William Brugh Joy       3\n35    George Gurdjieff          Nyogen Senzaki       1\n36    George Gurdjieff           Soen Nakagawa       1\n37        D. T. Suzuki        George Gurdjieff       1\n38    George Gurdjieff      Jiddu Krishnamurti       1\n39      Nyogen Senzaki       William Brugh Joy       2\n40        D. T. Suzuki           Soen Nakagawa       1\n41        D. T. Suzuki      Jiddu Krishnamurti       1\n42        D. T. Suzuki       William Brugh Joy       1\n43  Jiddu Krishnamurti       William Brugh Joy       1\n49       Harriet Doerr         Wallace Stegner       2\n54      Carolyn Conger       William Brugh Joy       1\n58      Mary Zimbalist           Sam Zimbalist       2\n61      Anne Lindbergh        Eido Tai Shimano       1\n62    Eido Tai Shimano  Zentatsu Richard Baker       1\n63    Eido Tai Shimano          Noel Rodriguez       1\n66      Anne Lindbergh            Helen Corral       1\n67      Anne Lindbergh             Felix Wolff       1\n68         Felix Wolff            Helen Corral       1\n\n\n\nG_filtered = networkx.from_pandas_edgelist(df_filtered, \n                                  'Source', \n                                  'Target', \n                                  'Weight')\n\n\n#Calculate the degree for each node and add it as a node attribute\ndegrees = dict(networkx.degree(G_filtered))\nnetworkx.set_node_attributes(G_filtered, name='degree', values=degrees)\n\n\nmodularity_class = {}\nmodularity_color = {}\n\n#Loop through each community\nfor community_number, community in enumerate(communities):\n    color = BuRd8[community_number % len(BuRd8)]  \n    for name in community: \n        modularity_class[name] = community_number\n        modularity_color[name] = color\n\nnetworkx.set_node_attributes(G_filtered, name='modularity_class', values=modularity_class)\nnetworkx.set_node_attributes(G_filtered, name='modularity_color', values=modularity_color)\n\n\ntitle = 'Memoir Network by Modularity Class Without Ruth McCandless'\n\n#Define the colors used to highlight nodes and edges\nnode_highlight_color = 'yellow'\nedge_highlight_color = 'red'\n\n#Determine the attributes from the network that set the radius and color of nodes\nnode_radius_attribute = 0.3\nnode_color_attribute = 'modularity_color'\n\n#Define categories\nTOOLTIPS = [\n       (\"Modularity Class\", \"@modularity_class\"),\n       (\"Character\", \"@index\"),\n       (\"Modularity Color\", \"$color[swatch]:modularity_color\"),\n       (\"Degree\", \"@degree\")\n]\n\n#Generate a plot with specified dimensions, toolbar options, and title\nplot = figure(tooltips = TOOLTIPS, tools=\"wheel_zoom,reset,save,pan\", active_scroll='wheel_zoom',\n              x_range=Range1d(-22, 22), y_range=Range1d(-22, 22), title=title)\n\n#Construct a network graph object from the network data\nnetwork_graph = from_networkx(G_filtered, networkx.spring_layout, scale=20, center=(0, 0))\n\n#Assign the colors used to highlight edges\nnetwork_graph.edge_renderer.hover_glyph = MultiLine(line_color=edge_highlight_color)\nnetwork_graph.edge_renderer.selection_glyph = MultiLine(line_color=edge_highlight_color)\n\n#Adjust the radius and colors of nodes based on their degree\nnetwork_graph.node_renderer.glyph = Circle(radius=node_radius_attribute, fill_color=node_color_attribute)\n\n# Define a linear color mapper for edge weights\nedge_weights = [G_filtered[u][v]['Weight'] for u, v in G_filtered.edges()]\nmin_weight = min(edge_weights)\nmax_weight = max(edge_weights)\nedge_cmap = linear_cmap('Weight', palette=Viridis256, low=min_weight, high=max_weight)\n\n# Scale weights to a smaller range\nscaled_weights = [1 + 20 * (w - min_weight) / (max_weight - min_weight) for w in edge_weights]\nedge_cmap = linear_cmap('Weight', palette=Viridis256, low=min_weight, high=max_weight)\n\n# Define the opacity and width for edges based on scaled weights\nnetwork_graph.edge_renderer.data_source.data['scaled_weight'] = scaled_weights\nnetwork_graph.edge_renderer.glyph = MultiLine(line_alpha=0.5, line_width='scaled_weight', line_color=edge_cmap)\n\n# Specify the colors used to highlight nodes\nnetwork_graph.node_renderer.selection_glyph = Circle(radius=node_radius_attribute, fill_color=node_highlight_color)\nnetwork_graph.node_renderer.hover_glyph = Circle(radius=node_radius_attribute, fill_color=node_highlight_color)\n\n#Enable highlighting of nodes and edges\nnetwork_graph.inspection_policy = NodesAndLinkedEdges()\nnetwork_graph.selection_policy = NodesAndLinkedEdges()\n\nplot.renderers.append(network_graph)\n\n#Add Labels to the graph\nx, y = zip(*network_graph.layout_provider.graph_layout.values())\nnode_labels = list(G_filtered.nodes())\nsource = ColumnDataSource({'x': x, 'y': y, 'name': [node_labels[i] for i in range(len(x))]})\nlabels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white', \n                  text_font_size='10px', background_fill_alpha=0.7)\nplot.renderers.append(labels)\n\noutput_file(f\"{title}.html\", title=title)\nshow(plot)\nsave(plot)\n\n\n  \n\n\n\n\n\n'/home/jovyan/Final-project-DH140/Memoir Network by Modularity Class Without Ruth McCandless.html'\n\n\nResult 2: Memoir Network by Modularity Class Without Ruth McCandless\nIn a graph without Ruth McCandless, the characters are grouped into different groups. First, the largest group is roughly connected due to their involvement with Zen Buddhism. Most noteabley, Nyogen Senzaki and Soen Nakagawa are the two central figures in the graph. There are other characters are only loosely connected to the graph which are Helen Corral and Felix Wolff. They are only connected to Anne Lindbergh rather than the central figure.\nFeatures: The colors of the nodes are from colorblind-friendly palettes.\n\n\nProfession Cooccurrence Network\n\nimport networkx as nx\nfrom bokeh.palettes import Viridis256\nfrom collections import Counter\n\n# Professions dictionary\nprofessions = {\n    'Jiddu Krishnamurti': 'Indian Buddhist Practitioner',\n    'Nyogen Senzaki': 'Japanese Buddhist Practitioner',\n    'Soen Nakagawa': 'Japanese Buddhist Practitioner',\n    'Vanda Scaravelli': 'Indian Buddhist Practitioner',\n    'William Brugh Joy': 'Spiritualist',\n    'Anne Lindbergh': 'Writer',\n    'D. T. Suzuki': 'Japanese Buddhist Practitioner',\n    'Ruth McCandless': 'Japanese Buddhist Practitioner',\n    'Radha Rajagopal Sloss': 'Indian Buddhist Practitioner',\n    'Soyen Shaku': 'Japanese Buddhist Practitioner',\n    'Eido Tai Shimano': 'Japanese Buddhist Practitioner',\n    'Sohaku Ogata': 'Japanese Buddhist Practitioner',\n    'Helen Corral': 'Actress',\n    'Edith R. Mirrielees': 'Educator',\n    'Carolyn Conger': 'Spiritualist',\n    'Harriet Doerr': 'Writer',\n    'Mary Zimbalist': 'Actress',\n    'Sōgen Asahina': 'Japanese Buddhist Practitioner',\n    'Robert Baker Aitken': 'Japanese Buddhist Practitioner',\n    'Brian Weiss': 'Spiritualist',\n    'Wallace Stegner': 'Writer',\n    'Shubin Tanahashi': 'Japanese Buddhist Practitioner',\n    'Anthony Sokol': 'Educator',\n    'Beatrice Wood': 'Painter',\n    'Wilfred Stone': 'Educator',\n    'Geoffrey Farwell': 'Organizational Personnel',\n    'Zentatsu Richard Baker': 'Japanese Buddhist Practitioner',\n    'Bill Rample': 'Organizational Personnel',\n    'Noel Rodriguez': 'Japanese Buddhist Practitioner',\n    'Peter Matthiessen': 'Writer',\n    'Felix Wolff': 'Publisher',\n    'Helen Wolff': 'Publisher',\n    'Dennis Merzel': 'Japanese Buddhist Practitioner',\n    'Manly P. Hall': 'Writer',\n    'Paul Reps': 'Writer',\n    'Frederick Spiegelberg': 'Educator',\n    'John Dodds': 'Educator',\n    'Gary Snyder': 'Writer',\n    'Jack Kerouac': 'Writer',\n    'Reginald Berkeley': 'Writer',\n    'George Gurdjieff': 'Spiritualist',\n    'Alan Watts': 'Japanese Buddhist Practitioner',\n    'Robertson Davies': 'Writer',\n    'Sam Zimbalist': 'Film Producer',\n    'Elisabeth Haich': 'Indian Buddhist Practitioner',\n    'Selvarajan Yesudian': 'Indian Buddhist Practitioner'\n}\n\n# Map names to professions\ndf['Source_Profession'] = df['Source'].map(professions)\ndf['Target_Profession'] = df['Target'].map(professions)\n\n# Create a new DataFrame with professions and co-occurrence counts\nprofession_pairs = list(zip(df['Source_Profession'], df['Target_Profession']))\nprofession_counter = Counter(profession_pairs)\ndf_professions = pd.DataFrame(profession_counter.items(), columns=['Profession_Pair', 'Weight'])\n\n# Split the profession pairs into separate columns\ndf_professions[['Source_Profession', 'Target_Profession']] = pd.DataFrame(df_professions['Profession_Pair'].tolist(), index=df_professions.index)\ndf_professions.drop(columns=['Profession_Pair'], inplace=True)\n\n# Create the graph\nG_professions = nx.from_pandas_edgelist(df_professions, 'Source_Profession', 'Target_Profession', 'Weight')\n\n# Define the colors used to highlight nodes and edges\nnode_highlight_color = 'yellow'\nedge_highlight_color = 'red'\n\n# Determine the attributes from the network that set the radius and color of nodes\nnode_radius_attribute = 1\nnode_color_attribute = 'modularity_color'\n\n# Generate a plot with specified dimensions, toolbar options, and title\nplot = figure(tools=\"wheel_zoom,reset,save,pan\", active_scroll='wheel_zoom',\n              x_range=Range1d(-22, 22), y_range=Range1d(-22, 22), title='Profession Co-occurrence Network')\n\n# Construct a network graph object from the network data\nnetwork_graph = from_networkx(G_professions, nx.spring_layout, scale=20, center=(0, 0))\n\n# Define a linear color mapper for edge weights\nedge_weights = [G_professions[u][v]['Weight'] for u, v in G_professions.edges()]\nmin_weight = min(edge_weights)\nmax_weight = max(edge_weights)\n# Scale weights to a smaller range\nscaled_weights = [1 + 70 * (w - min_weight) / (max_weight - min_weight) for w in edge_weights]\nedge_cmap = linear_cmap('Weight', palette=Viridis256, low=min_weight, high=max_weight)\n\n# Define the opacity and width for edges based on scaled weights\nnetwork_graph.edge_renderer.data_source.data['scaled_weight'] = scaled_weights\nnetwork_graph.edge_renderer.glyph = MultiLine(line_alpha=0.5, line_width='scaled_weight', line_color=edge_cmap)\n\n# Specify the colors used to highlight nodes\nnetwork_graph.node_renderer.selection_glyph = Circle(radius=node_radius_attribute, fill_color=node_highlight_color, line_width=3)\nnetwork_graph.node_renderer.hover_glyph = Circle(radius=node_radius_attribute, fill_color=node_highlight_color, line_width=3)\n\n# Enable highlighting of nodes and edges\nnetwork_graph.inspection_policy = NodesAndLinkedEdges()\nnetwork_graph.selection_policy = NodesAndLinkedEdges()\n\nplot.renderers.append(network_graph)\n\n# Add Labels to the graph\nx, y = zip(*network_graph.layout_provider.graph_layout.values())\nnode_labels = list(G_professions.nodes())\nsource = ColumnDataSource({'x': x, 'y': y, 'name': [node_labels[i] for i in range(len(x))]})\nlabels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white',\n                  text_font_size='10px', background_fill_alpha=0.7)\nplot.renderers.append(labels)\n\noutput_file(\"Profession_Cooccurrence_Network.html\", title='Profession Co-occurrence Network')\nshow(plot)\nsave(plot)\n\n\n  \n\n\n\n\n\n'/home/jovyan/Final-project-DH140/Profession_Cooccurrence_Network.html'\n\n\nResult 3: Profession_Cooccurrence_Network\nThe nodes represent professions and the line widths reflect the count of co-occurrences for professions. The graph shows educators and spirtualists are closely connected to Japanese Buddhist practitioners. Writers are the second. Actresses, organizational personnels, and Indian Buddhist practitioners are the third.\n\n\n2. Profession-Based Network Graphs:\n\nThough Community-Based Network Graph could give us some insights about the network in the text, given the diversity of professions, I aimed to group nodes by their professions to provide a clearer visualization, where nodes were colored based on their professions.\nFor I assigned each individual to a profession category, which are Indian Buddhist Practitioner, Japanese Buddhist Practitioner, Creator, Spiritualist, Educator, or Organizational Personnel. The title of this graph is “Memoir Network by Six Professions”\nCreators were further divided into sub-categories: Writer, Actress, Film Producer, and Publisher. The title of this graph is “Memoir Network by Eleven Professions’\nI also calculated the degree and betweenness centrality of the dataframe.\nGiven the diversity of professions in the graph, I aimed to group them together by related professions within the same area. Despite my attempts, I faced challenges in achieving this grouping effectively. The two failed appoarches are named “Failled: Memoir Network by Professions Grouped Horizontally” and “Failled: Memoir Network by Professions Grouped Separately”\n\n\n\n“Memoir Network by Six Professions”\n\nfrom bokeh.models import Legend, LegendItem, Scatter\nfrom bokeh.palettes import Light, HighContrast, Bright\nimport networkx as nx\n\n\n# Assign professions to people \n\nprofessions = {\n    'Jiddu Krishnamurti': 'Indian Buddhist Practitioner',\n    'Nyogen Senzaki': 'Japanese Buddhist Practitioner',\n    'Soen Nakagawa': 'Japanese Buddhist Practitioner',\n    'Vanda Scaravelli': 'Indian Buddhist Practitioner',\n    'William Brugh Joy': 'Spiritualist',\n    'Anne Lindbergh': 'Creator',\n    'D. T. Suzuki': 'Japanese Buddhist Practitioner',\n    'Ruth McCandless': 'Japanese Buddhist Practitioner',\n    'Radha Rajagopal Sloss': 'Indian Buddhist Practitioner',\n    'Soyen Shaku': 'Japanese Buddhist Practitioner',\n    'Eido Tai Shimano': 'Japanese Buddhist Practitioner',\n    'Sohaku Ogata': 'Japanese Buddhist Practitioner',\n    'Helen Corral': 'Creator',\n    'Edith R. Mirrielees': 'Educator',\n    'Carolyn Conger': 'Spiritualist',\n    'Harriet Doerr': 'Creator',\n    'Mary Zimbalist': 'Creator',\n    'Sōgen Asahina': 'Japanese Buddhist Practitioner',\n    'Robert Baker Aitken': 'Japanese Buddhist Practitioner',\n    'Brian Weiss': 'Spiritualist',\n    'Wallace Stegner': 'Creator',\n    'Shubin Tanahashi': 'Japanese Buddhist Practitioner',\n    'Anthony Sokol': 'Educator',\n    'Beatrice Wood': 'Creator',\n    'Wilfred Stone': 'Educator',\n    'Geoffrey Farwell': 'Organizational Personnel',\n    'Zentatsu Richard Baker': 'Japanese Buddhist Practitioner',\n    'Bill Rample': 'Organizational Personnel',\n    'Noel Rodriguez': 'Japanese Buddhist Practitioner',\n    'Peter Matthiessen': 'Creator',\n    'Felix Wolff': 'Creator',\n    'Helen Wolff': 'Creator',\n    'Dennis Merzel': 'Japanese Buddhist Practitioner',\n    'Manly P. Hall': 'Creator',\n    'Paul Reps': 'Creator',\n    'Frederick Spiegelberg': 'Educator',\n    'John Dodds': 'Educator',\n    'Gary Snyder': 'Creator',\n    'Jack Kerouac': 'Creator',\n    'Reginald Berkeley': 'Creator',\n    'George Gurdjieff': 'Spiritualist',\n    'Alan Watts': 'Japanese Buddhist Practitioner',\n    'Robertson Davies': 'Creator',\n    'Sam Zimbalist': 'Creator',\n    'Elisabeth Haich': 'Indian Buddhist Practitioner',\n    'Selvarajan Yesudian': 'Indian Buddhist Practitioner'\n}\n\n# Assign professions to nodes\nfor node in G.nodes():\n    if node in professions:\n        G.nodes[node]['profession'] = professions[node]\n\n# Create a color palette for professions\nprofession_color_palette = {\n    'Indian Buddhist Practitioner': Light[7][0],\n    'Japanese Buddhist Practitioner': Light[7][1],\n    'Creator': Light[7][2],\n    'Educator': Light[7][3],\n    'Spiritualist': Light[7][4],\n    'Organizational Personnel': Light[7][5]\n}\n\n# Assign colors to nodes based on profession\nfor node in G.nodes():\n    G.nodes[node]['profession_color'] = profession_color_palette[G.nodes[node]['profession']]\n\n# Define the colors used to highlight nodes and edges\nnode_highlight_color = 'purple'\nedge_highlight_color = 'yellowgreen'\n\n# Define tooltips\nHOVER_TOOLTIPS = [\n    (\"Character\", \"@index\"),\n    (\"Degree\", \"@degree\"),\n    (\"Profession\", \"@profession\"),\n    (\"Profession Color\", \"$color[swatch]:profession_color\"),\n]\n\ntitle = 'Memoir Network by Six Professions'\n\n# Generate a plot with specified dimensions, toolbar options, and title\nplot = figure(tooltips=HOVER_TOOLTIPS,\n              tools=\"pan,wheel_zoom,save,reset\", active_scroll='wheel_zoom',\n              x_range=Range1d(-30, 30), y_range=Range1d(-30, 30), title=title,\n              width=800, height=800) \n\n# Construct a network graph object from the network data\nnetwork_graph = from_networkx(G, nx.spring_layout, scale=25, center=(0, 0))\n\n# Adjust the sizes and colors of nodes based on their degree\nnetwork_graph.node_renderer.glyph = Scatter(size=25, fill_color='profession_color')\n\n# Specify the colors used to highlight nodes\nnetwork_graph.node_renderer.hover_glyph = Scatter(size=25, fill_color=node_highlight_color, line_width=2)\nnetwork_graph.node_renderer.selection_glyph = Scatter(size=25, fill_color=node_highlight_color, line_width=2)\n\n# Define the opacity and width for edges\nnetwork_graph.edge_renderer.glyph = MultiLine(line_alpha=0.3, line_width=1)\n\n# Assign the colors used to highlight edges\nnetwork_graph.edge_renderer.selection_glyph = MultiLine(line_color=edge_highlight_color, line_width=2)\nnetwork_graph.edge_renderer.hover_glyph = MultiLine(line_color=edge_highlight_color, line_width=2)\n\n# Enable highlighting of nodes and edges\nnetwork_graph.selection_policy = NodesAndLinkedEdges()\nnetwork_graph.inspection_policy = NodesAndLinkedEdges()\n\nplot.renderers.append(network_graph)\n\n# Add Labels to the graph\nx, y = zip(*network_graph.layout_provider.graph_layout.values())\nnode_labels = list(G.nodes())\nsource = ColumnDataSource({'x': x, 'y': y, 'name': node_labels})\nlabels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white', text_font_size='15px', background_fill_alpha=0.7)\nplot.renderers.append(labels)\n\n# Add legend\nlegend_items = []\nfor prof, color in profession_color_palette.items():\n    dummy_source = ColumnDataSource({'x': [0], 'y': [0]})\n    dummy_renderer = plot.scatter(x='x', y='y', size=1, color=color, source=dummy_source, legend_label=prof)\n    legend_item = LegendItem(label=prof, renderers=[dummy_renderer])\n\nlegend = Legend(items=legend_items, location=(0, -30))\n\noutput_file(f\"{title}.html\", title=title)\nshow(plot)\nsave(plot)\n\n\n  \n\n\n\n\n\n'/home/jovyan/Final-project-DH140/Memoir Network by Six Professions.html'\n\n\n\nResult 4: Memoir Network by Six Professions\nThis graph categorizes nodes based on six professions: Indian Buddhist Practitioner, Japanese Buddhist Practitioner, Creator, Educator, Spiritualist, and Organizational Personnel. This categorization helps in quickly identifying the professional diversity within the network.\nFeatures: Node Attributes: Nodes are colored based on their profession which were input manually. The legend on the right side clearly explains the color codes, making it accessible for viewers to identify professions. The colors are from colorblind-friendly palettes.\nUsage: This graph is useful for understanding the professional composition of the network and seeing how different professions are connected. However, it relies on close reading and requires more time to create the graph.\nFindings: Through the clear categorization of individuals by profession, the group of Japanese Buddhist practitioners has the largest number of characters. McCandless is also frequently involved with creators. Creators in that era are also interested in exploring different religion and spirtual wellbeings. In addition, Spiritualist such as “George Gurdjieff” is closed involved with Japanese Buddhist practitioners.\n\n# Building “Memoir Network by Eleven Professions”\n\nprofessions = {\n    'Jiddu Krishnamurti': 'Indian Buddhist Practitioner',\n    'Nyogen Senzaki': 'Japanese Buddhist Practitioner',\n    'Soen Nakagawa': 'Japanese Buddhist Practitioner',\n    'Vanda Scaravelli': 'Indian Buddhist Practitioner',\n    'William Brugh Joy': 'Spiritualist',\n    'Anne Lindbergh': 'Writer',\n    'D. T. Suzuki': 'Japanese Buddhist Practitioner',\n    'Ruth McCandless': 'Japanese Buddhist Practitioner',\n    'Radha Rajagopal Sloss': 'Indian Buddhist Practitioner',\n    'Soyen Shaku': 'Japanese Buddhist Practitioner',\n    'Eido Tai Shimano': 'Japanese Buddhist Practitioner',\n    'Sohaku Ogata': 'Japanese Buddhist Practitioner',\n    'Helen Corral': 'Actress',\n    'Edith R. Mirrielees': 'Educator',\n    'Carolyn Conger': 'Spiritualist',\n    'Harriet Doerr': 'Writer',\n    'Mary Zimbalist': 'Actress',\n    'Sōgen Asahina': 'Japanese Buddhist Practitioner',\n    'Robert Baker Aitken': 'Japanese Buddhist Practitioner',\n    'Brian Weiss': 'Spiritualist',\n    'Wallace Stegner': 'Writer',\n    'Shubin Tanahashi': 'Japanese Buddhist Practitioner',\n    'Anthony Sokol': 'Educator',\n    'Beatrice Wood': 'Painter',\n    'Wilfred Stone': 'Educator',\n    'Geoffrey Farwell': 'Organizational Personnel',\n    'Zentatsu Richard Baker': 'Japanese Buddhist Practitioner',\n    'Bill Rample': 'Organizational Personnel',\n    'Noel Rodriguez': 'Japanese Buddhist Practitioner',\n    'Peter Matthiessen': 'Writer',\n    'Felix Wolff': 'Publisher',\n    'Helen Wolff': 'Publisher',\n    'Dennis Merzel': 'Japanese Buddhist Practitioner',\n    'Manly P. Hall': 'Writer',\n    'Paul Reps': 'Writer',\n    'Frederick Spiegelberg': 'Educator',\n    'John Dodds': 'Educator',\n    'Gary Snyder': 'Writer',\n    'Jack Kerouac': 'Writer',\n    'Reginald Berkeley': 'Writer',\n    'George Gurdjieff': 'Spiritualist',\n    'Alan Watts': 'Japanese Buddhist Practitioner',\n    'Robertson Davies': 'Writer',\n    'Sam Zimbalist': 'Flim Producer',\n    'Elisabeth Haich': 'Indian Buddhist Practitioner',\n    'Selvarajan Yesudian': 'Indian Buddhist Practitioner'\n}\n\n# Assign professions to nodes\nfor node in G.nodes():\n    if node in professions:\n        G.nodes[node]['profession'] = professions[node]\n\n# Create a color palette for professions\nprofession_color_palette = {\n    'Indian Buddhist Practitioner': Light[9][0],\n    'Japanese Buddhist Practitioner': Light[9][1],\n    'Creator': Light[9][2],\n    'Educator': Light[9][3],\n    'Spiritualist': Light[9][4],\n    'Organizational Personnel': Light[9][5],\n    'Writer': Light[9][6],\n    'Actress': Bright[7][5],\n    'Painter': HighContrast[3][0],\n    'Flim Producer': HighContrast[3][1],\n    'Publisher': HighContrast[3][2]\n}\n\n# Assign colors to nodes based on profession\nfor node in G.nodes():\n    G.nodes[node]['profession_color'] = profession_color_palette[G.nodes[node]['profession']]\n\n# Define the colors used to highlight nodes and edges\nnode_highlight_color = 'purple'\nedge_highlight_color = 'yellowgreen'\n\n# Define tooltips\nHOVER_TOOLTIPS = [\n    (\"Character\", \"@index\"),\n    (\"Degree\", \"@degree\"),\n    (\"Profession\", \"@profession\"),\n    (\"Profession Color\", \"$color[swatch]:profession_color\"),\n]\n\ntitle = 'Memoir Network by Eleven Professions'\n\n# Generate a plot with specified dimensions, toolbar options, and title\nplot = figure(tooltips=HOVER_TOOLTIPS,\n              tools=\"pan,wheel_zoom,save,reset\", active_scroll='wheel_zoom',\n              x_range=Range1d(-25, 25), y_range=Range1d(-25, 25), title=title,\n              width=1000, height=1000) \n\n# Construct a network graph object from the network data\nnetwork_graph = from_networkx(G, nx.spring_layout, scale=21, center=(0, 0))\n\n# Adjust the sizes and colors of nodes based on their degree\nnetwork_graph.node_renderer.glyph = Scatter(size=25, fill_color='profession_color')\n\n# Specify the colors used to highlight nodes\nnetwork_graph.node_renderer.hover_glyph = Scatter(size=25, fill_color=node_highlight_color, line_width=2)\nnetwork_graph.node_renderer.selection_glyph = Scatter(size=25, fill_color=node_highlight_color, line_width=2)\n\n# Define the opacity and width for edges\nnetwork_graph.edge_renderer.glyph = MultiLine(line_alpha=0.3, line_width=1)\n\n# Assign the colors used to highlight edges\nnetwork_graph.edge_renderer.selection_glyph = MultiLine(line_color=edge_highlight_color, line_width=2)\nnetwork_graph.edge_renderer.hover_glyph = MultiLine(line_color=edge_highlight_color, line_width=2)\n\n# Enable highlighting of nodes and edges\nnetwork_graph.selection_policy = NodesAndLinkedEdges()\nnetwork_graph.inspection_policy = NodesAndLinkedEdges()\n\nplot.renderers.append(network_graph)\n\n# Add Labels to the graph\nx, y = zip(*network_graph.layout_provider.graph_layout.values())\nnode_labels = list(G.nodes())\nsource = ColumnDataSource({'x': x, 'y': y, 'name': node_labels})\nlabels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white', text_font_size='15px', background_fill_alpha=0.7)\nplot.renderers.append(labels)\n\n# Add legend\nlegend_items = []\nfor prof, color in profession_color_palette.items():\n    dummy_source = ColumnDataSource({'x': [0], 'y': [0]})\n    dummy_renderer = plot.scatter(x='x', y='y', size=1, color=color, source=dummy_source, legend_label=prof)\n    legend_item = LegendItem(label=prof, renderers=[dummy_renderer])\n\nlegend = Legend(items=legend_items, location=(0, -30))\n\n# Specify output file and save the plot\noutput_file(f\"{title}.html\", title=title)\nshow(plot)\nsave(plot)\n\n\n  \n\n\n\n\n\n'/home/jovyan/Final-project-DH140/Memoir Network by Eleven Professions.html'\n\n\n\n\nResult 5: Memoir Network by Eleven Professions\nThe “Memoir Network by Eleven Professions” graph provides a more detailed categorization of the professional roles within Ruth McCandless’s network, offering a richer analysis compared to the six-profession graph.\nFeatures: Nodes are color-coded based on eleven professional categories: Indian Buddhist Practitioner, Japanese Buddhist Practitioner, Creator, Educator, Spiritualist, Organizational Personnel, Writer, Actress, Painter, Film Producer, and Publisher. This detailed categorization helps in understanding the specific roles of individuals within the network. The legend on the right side clearly explains the color codes, making it accessible for viewers to identify professions.\nFindings: Ruth McCandless interacts with individuals across various fields of expertise, highlighting a notable trend in the mid to late twentieth century: upper-class individuals, particularly writers and those in the entertainment industry, had a keen interest in exploring religion and spirituality. This phenomenon underscores the cultural and intellectual curiosity of the era, where prominent figures sought deeper understanding and experiences beyond their professional domains.\n\n# Degree of characters \ndegrees = dict(networkx.degree(G))\nnetworkx.set_node_attributes(G, name='degree', values=degrees)\ndegree_df = pd.DataFrame(G.nodes(data='degree'), columns=['node', 'degree'])\ndegree_df = degree_df.sort_values(by='degree', ascending=False)\ndegree_df\n\n\n\n\n\n\n\n\nnode\ndegree\n\n\n\n\n1\nRuth McCandless\n39\n\n\n0\nNyogen Senzaki\n10\n\n\n2\nD. T. Suzuki\n7\n\n\n5\nSoen Nakagawa\n7\n\n\n8\nWilliam Brugh Joy\n6\n\n\n11\nJiddu Krishnamurti\n6\n\n\n6\nEido Tai Shimano\n4\n\n\n25\nGeorge Gurdjieff\n4\n\n\n37\nAnne Lindbergh\n4\n\n\n12\nHelen Corral\n3\n\n\n40\nFelix Wolff\n3\n\n\n17\nWallace Stegner\n3\n\n\n10\nZentatsu Richard Baker\n3\n\n\n29\nHarriet Doerr\n2\n\n\n4\nSōgen Asahina\n2\n\n\n3\nSoyen Shaku\n2\n\n\n14\nPaul Reps\n2\n\n\n21\nJack Kerouac\n2\n\n\n20\nGary Snyder\n2\n\n\n36\nSam Zimbalist\n2\n\n\n35\nMary Zimbalist\n2\n\n\n27\nCarolyn Conger\n2\n\n\n19\nJohn Dodds\n2\n\n\n18\nBeatrice Wood\n2\n\n\n9\nSohaku Ogata\n2\n\n\n38\nNoel Rodriguez\n2\n\n\n7\nManly P. Hall\n1\n\n\n24\nReginald Berkeley\n1\n\n\n23\nGeoffrey Farwell\n1\n\n\n15\nFrederick Spiegelberg\n1\n\n\n13\nVanda Scaravelli\n1\n\n\n22\nEdith R. Mirrielees\n1\n\n\n16\nAnthony Sokol\n1\n\n\n32\nBill Rample\n1\n\n\n31\nAlan Watts\n1\n\n\n30\nBrian Weiss\n1\n\n\n28\nShubin Tanahashi\n1\n\n\n26\nPeter Matthiessen\n1\n\n\n34\nRadha Rajagopal Sloss\n1\n\n\n33\nRobertson Davies\n1\n\n\n39\nElisabeth Haich\n1\n\n\n\n\n\n\n\n\nnum_nodes_to_inspect = 10\ndegree_df[:num_nodes_to_inspect].plot(x='node', y='degree', color='blue', kind='barh').invert_yaxis()\n\n\n\n\n\n\n\n\n\n# Betweenness Centrality of Characters \nbetweenness_centrality = networkx.betweenness_centrality(G)\nnetworkx.set_node_attributes(G, name='betweenness', values=betweenness_centrality)\nbetweenness_df = pd.DataFrame(G.nodes(data='betweenness'), columns=['node', 'betweenness'])\nbetweenness_df = betweenness_df.sort_values(by='betweenness', ascending=False)\nbetweenness_df\n\n\n\n\n\n\n\n\nnode\nbetweenness\n\n\n\n\n1\nRuth McCandless\n0.923846\n\n\n0\nNyogen Senzaki\n0.029231\n\n\n2\nD. T. Suzuki\n0.013333\n\n\n5\nSoen Nakagawa\n0.013333\n\n\n11\nJiddu Krishnamurti\n0.009487\n\n\n8\nWilliam Brugh Joy\n0.003205\n\n\n6\nEido Tai Shimano\n0.001923\n\n\n37\nAnne Lindbergh\n0.001282\n\n\n17\nWallace Stegner\n0.000897\n\n\n10\nZentatsu Richard Baker\n0.000897\n\n\n7\nManly P. Hall\n0.000000\n\n\n3\nSoyen Shaku\n0.000000\n\n\n4\nSōgen Asahina\n0.000000\n\n\n13\nVanda Scaravelli\n0.000000\n\n\n14\nPaul Reps\n0.000000\n\n\n15\nFrederick Spiegelberg\n0.000000\n\n\n9\nSohaku Ogata\n0.000000\n\n\n16\nAnthony Sokol\n0.000000\n\n\n18\nBeatrice Wood\n0.000000\n\n\n19\nJohn Dodds\n0.000000\n\n\n20\nGary Snyder\n0.000000\n\n\n21\nJack Kerouac\n0.000000\n\n\n22\nEdith R. Mirrielees\n0.000000\n\n\n23\nGeoffrey Farwell\n0.000000\n\n\n12\nHelen Corral\n0.000000\n\n\n24\nReginald Berkeley\n0.000000\n\n\n25\nGeorge Gurdjieff\n0.000000\n\n\n27\nCarolyn Conger\n0.000000\n\n\n26\nPeter Matthiessen\n0.000000\n\n\n29\nHarriet Doerr\n0.000000\n\n\n30\nBrian Weiss\n0.000000\n\n\n31\nAlan Watts\n0.000000\n\n\n28\nShubin Tanahashi\n0.000000\n\n\n32\nBill Rample\n0.000000\n\n\n33\nRobertson Davies\n0.000000\n\n\n35\nMary Zimbalist\n0.000000\n\n\n34\nRadha Rajagopal Sloss\n0.000000\n\n\n36\nSam Zimbalist\n0.000000\n\n\n38\nNoel Rodriguez\n0.000000\n\n\n39\nElisabeth Haich\n0.000000\n\n\n40\nFelix Wolff\n0.000000\n\n\n\n\n\n\n\n\nnum_nodes_to_inspect = 10\nbetweenness_df[:num_nodes_to_inspect].plot(x='node', y='betweenness', color='blue', kind='barh').invert_yaxis()"
  },
  {
    "objectID": "posts/final_project_notebook.html#discussion",
    "href": "posts/final_project_notebook.html#discussion",
    "title": "The Story of Kangetsu: Network Analysis of a Buddhist Scholar’s Memoir",
    "section": "Discussion",
    "text": "Discussion"
  },
  {
    "objectID": "posts/final_project_notebook.html#analysis-and-insights",
    "href": "posts/final_project_notebook.html#analysis-and-insights",
    "title": "The Story of Kangetsu: Network Analysis of a Buddhist Scholar’s Memoir",
    "section": "Analysis and Insights",
    "text": "Analysis and Insights\nThe memoir network analysis reveals Ruth McCandless’ extensive and varied connections with individuals across different fields of expertise. This network graph illustrates her pivotal role in connecting diverse groups, particularly within Zen Buddhism, Indian philosophy, and the creative industry. The modularity class graph highlights the community structures within her network, showing clusters of closely connected individuals. In contrast, the profession-based graphs categorize these individuals by their professional roles, providing a detailed view of their contributions.\n\nObservations from the Visual Representation:\n\nDominance of Japanese Buddhist Practitioners: One of the advantages of network analysis is its straightforwardness. The original file is one hundred pages long, so looking at the visualization helps save time. Japanese Buddhist practitioners are prominently represented in the network, possibly reflecting Ruth McCandless’s background as a Buddhist and author of two Buddhist books. This suggests a significant presence and influence of Japanese Buddhism within Ruth McCandless’ professional circle. The centrality of Japanese Buddhist practitioners can also be perceived from the degree and betweenness centrality tables.\nClose Proximity of Writers, Japanese Buddhist Practitioners, and Spiritualists: From the “Profession Co-occurrence Network” graph, it is clear that these groups of professions co-appear frequently. This is mainly because Ruth McCandless is the central figure of the graph and has the highest degree of betweenness centrality. As a Japanese Buddhist practitioner, she is closely connected to educators, writers, and spiritualists. In the graph, there are groupings of professions: Indian Buddhist practitioners, spiritualists, and Japanese Buddhist practitioners form a triangle. Actresses, publishers, film producers, and writers are closely connected. Educators and painters are also closely connected. This corresponds with the original text, making the visualization more straightforward compared to the original text.\nConnections with Other Professions: The analysis reveals a trend among upper-class individuals, particularly writers and those in the entertainment industry, to explore religion and spirituality in the mid to late 20th century. Ruth McCandless’s interactions with various spiritual leaders and philosophers reflect this broader cultural and intellectual curiosity. Some individuals have a genuine interest in Buddhism and seek more profound knowledge about Japanese Buddhism through their relationship with Ruth McCandless, while others are acquaintances from upper social circles. This can be perceived from the “Memoir Network by Modularity Class Without Ruth McCandless” graph. There are characters who are not connected with the large group mainly composed of Buddhist practitioners. These scattered individuals are only connected to Ruth McCandless and therefore are not interested in Buddhist religious activities, such as Gary Snyder and Jack Kerouac. This finding corresponds with the original text.\nInterest in Religion in the Literary and Creative Circles: In the “Memoir Network by Modularity Class Without Ruth McCandless” graph, the largest group is the Buddhist practitioners. Additionally, there are writers like Wallace Stegner and Harriet Doerr. Cross-checking the original text, the representation is accurate. The graph underscores a notable interest in religion among people in the literary and creative fields during the 20th century. This period saw prominent figures seeking a deeper understanding and experiences beyond their professional domains. Religious groups, including Buddhists, were not isolated but rather deeply integrated into broader societal networks.\n\n\n\nMissing Relationships and Context:\n\nDespite these insights, the current dataset has limitations. The network graph is based on known connections documented in the memoir, which may not capture all relevant relationships. For instance, informal or less documented interactions that could not be identified by name entities might be missing. In addition, the interviewer was not included in the network analysis.\nA large portion of the text is about Ruth McCandless’ personal life. Excluding this part from the network analysis might result in an incomplete understanding of her.\n\n\n\nFurther Work and Complementary Data:\nTo complement the current analysis, further work could include: 1. Incorporating Additional Sources: Expanding the dataset to include letters, personal diaries, and other primary sources in the Ruth McCandless Collections could provide a more comprehensive view of Ruth McCandless’s network. 2. Contextual Analysis: Integrating data on historical events, cultural movements, and geographic locations could offer deeper insights into the dynamics of her connections. 3. Temporal Analysis: Examining how Ruth McCandless’s network evolved could reveal shifts in her influence and the changing nature of her relationships.\n\n\nUtility of Findings:\nUnderstanding the structure of Ruth McCandless’ network and the broader cultural trends it represents can have several applications:\n\nHistorical Analysis: Identifying key figures and their connections offers insights into historical relationships and influences, particularly in the context of the American Zen Buddhist movement and its development.\nLiterary Studies: Analyzing the network of authors, thinkers, and creators can reveal underlying connections and thematic links in their works, reflecting their spiritual and intellectual engagements.\nSocial Network Analysis: This visualization helps understand social structures, key influencers, and the dynamics of relationships within a group, providing a framework for studying other historical or contemporary networks.\n\nThe interactive nature of the graph, with its highlighting features and detailed tooltips, makes it a powerful tool for researchers and analysts to explore the network deeply. By examining visualizations, one can derive significant insights about the roles and influences of different individuals within the network.\nOverall, the memoir network analysis not only sheds light on Ruth McCandless’ significant contributions but also reflects broader cultural and intellectual trends of her time, providing a valuable resource for historical, literary, and social studies. This work underscores the interconnectedness of various belief systems and professional domains within the social fabric of the mid-20th century."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]